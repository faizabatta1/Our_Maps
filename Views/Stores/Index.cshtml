@model IEnumerable<Our_Map_v2.Database.Store>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Lat)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Long)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Lat)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Long)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>

<script src="js/leaflet.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>


<div id="map" style="height: 350px; width:500px;"></div>

<script>
    var myBounds = L.latLngBounds(
        L.latLng(31.847816, 35.120888),// Southwest coordinates
        // Northeast coordinates
        L.latLng(31.944297, 35.276413),
    );

    var map = L.map('map',{
        maxBounds: myBounds, // Set the maximum bounds of the map
        maxBoundsViscosity: 1.0,
    }).setView([31.904566, 35.221030], 12);

   


        L.tileLayer('scripts/MapsData/part/{z}/{x}/{y}.png', {
            attribution: 'Map data &copy; OpenStreetMap contributors',
            maxZoom: 15,
            minZoom: 12,
        }).addTo(map);


    var stores = @Html.Raw(Json.Serialize(Model));

    for(let store of stores){
        var marker = L.marker([store.lat, store.long],{
            title:store.name
        }).addTo(map)
        .bindPopup(store.name)
        .openPopup();
    }



        $.getJSON("scripts/MapsData/Parkings.json", function (data) {
            L.geoJSON(data, {
                style: function (feature) {
                    return { color: feature.properties.color };
                }
            }).bindPopup(function (layer) {
                return layer.feature.properties.description;
        }).addTo(map);
        });


        $.getJSON("scripts/MapsData/Roads.json", function (data) {
        L.geoJSON(data, {
            style: function (feature) {
                return { color: feature.properties.color };
            }
        }).bindPopup(function (layer) {
            return layer.feature.properties.description;
        }).addTo(map);
            console.log(data);
        });


        $.getJSON("scripts/MapsData/Buildings.json", function (data) {
            console.log(data);
        L.geoJSON(data, {
            style: function (feature) {
                return { color: feature.properties.color };
            }
        }).bindPopup(function (layer) {
            return layer.feature.properties.description;
        }).addTo(map);
        });


        $.getJSON("scripts/MapsData/Boundaries.json", function (data) {
            console.log(data);
        L.geoJSON(data, {
            style: function (feature) {
                return { color: feature.properties.color };
            }
        }).bindPopup(function (layer) {
            return layer.feature.properties.description;
        }).addTo(map);
        });

</script>